# tab completion for whole modules, not just functions, objects, and methods
pd.<tab>
# also works for files and directories in your wd

x = pd.Series([1, 2, 3])
x? # similar to str()

# Crazy that you can easily view the source? All source saved locally?
# 	c:/users/jmonson/appdata/local/continuum/anaconda3/lib/site-packages/pandas/core/series.py

x?? # To show source

%run ipython_script_test.py
# run script with file name ipython_script_test.py from iPython environment
# 	Kind of similar to system() or system2(), but looks cleaner
# 	So this might be good for a macro for Excel or something...

%quickref # useful

a = np.random.randn(100, 100)
%timeit np.dot(a, a) # system.time()
%time
%prun # run statement thru code profiler

# get help for magic functions too
%reset?
%reset # rm()

%cd # better than os.chdir()??
%pwd # better than os.getcwd()??

%colors
%config # get better color scheme?

%debug # might be useful
%tb # traceback()?

%page # print object in pager
%%html # render cell as html
%%javascript # '' javascript
%%latex # '' latex

%pinfo
%pinfo2 # object info, like str()? might be useful

%qtconsole # open qtconsole connected to kernal


mtcars = control + p + up
# completes the line by searching thru the command history, super important!

a_command = foo(x, y, z)
a_ + up
# this will search thru command history MATCHING the a_text; also super
# 	important

2 ** 27
_ # PULLS THE MOST RECENT OUTPUT
2 ** 72
__ # PULLS THE SECOND MOST RECENT OUTPUT

foo = 'bar'
foo
_i39 # input in cell 39
_39 # output in cell 39
# So you can quickly reference input and output cells with '_' and '_i'
exec(_i48) # execute an old cell

# this functionality keeps large objects from being garbage collections,
# 	because they're stored in the cell input and output caches; would have
# 	to manage if large datasets and memory problems

# can store command in python object (list or string)

# anything after '!' is exectued in the system shell, so you can delete
# 	or copy files or directories, etc.
# can store output of sehll command in variable: var = !<expr>

# Skipping a lot of command line stuff, don't really use


# Directory bookmark system
# 	persist between sessions
%bookmark mydocs "//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents"
%bookmark C 'C:/'
%bookmark pandas_book "//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/Programming/Python/pydata-book-master/"
%bookmark -l

%pwd
%cd mydocs
%pwd

%pwd
%cd C
%pwd


# Software Development Tools
%debug
# enter after error raised to invoke post mortem debugger and enter stack
# 	frame where exception was raised
run ch03/ipython_bug.py
Dir = '/'.join([
	'//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents',
	'Programming/Python',
	'pydata-book-master/'
])
path = Dir + 'ch03/ipython_bug.py'
run path
run "//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/Programming/Python/pydata-book-master/ch03/ipython_bug.py"
%debug # now you can navigate thru the stack frame, using 'u' and 'd'
# 	arrows to navigate thru the stack trace.
u
u
d

# might want to invoke debugger or step thru code at certain execution points
run -d "//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/Programming/Python/pydata-book-master/ch03/ipython_bug.py"
s # step
c # continue
n # next line

run -d "//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/Programming/Python/pydata-book-master/ch03/ipython_bug.py"
s # this steps into a function
n # this goes down one line
!a # if variable name is same as command name, prefice with !


# page 65: set_trace() and debug() look important, but skipping for now

def f(x, y, z = 1):
	tmp = x + y
	return tmp / z
debug(f, 1, 2, z = 2)

# i could use more familiarity with debugging tools in general


# Timing Code: %time and %timeit
# 	Need these because don't have equivalent to system.time()
strings = ['foo', 'foobar', 'baz', 'qux', 'python', 'guido van rossum'] * 100000
method1 = [x for x in strings if x.startswith('foo')]
method2 = [x for x in strings if x[:3] == 'foo']
%time method1 = [x for x in strings if x.startswith('foo')]
%time method2 = [x for x in strings if x[:3] == 'foo']
%timeit method1 = [x for x in strings if x.startswith('foo')]
%timeit method2 = [x for x in strings if x[:3] == 'foo']
# get to know all the usual functions very well to understand performance
x = 'foobar'
y = 'foo'
%timeit x.startswith(y)
%timeit x[:3] == y


# Basic Profiling: %prun and %run -p
%cd pandas_book
%bookmark -l
python -m cProfile "//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/Programming/Python/pydata-book-master/ch03/cprof_example.py"
%prun "//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/Programming/Python/pydata-book-master/ch03/cprof_example.py"
%prun -l 7 -s cumulative run_experiment()
# Ad hoc function call to profile
%run -p -s cumulative "//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/Programming/Python/pydata-book-master/ch03/cprof_example.py"
# run from IPython and profile; i think this is the -p


# Profiling a Function Line-by-Line # Page 70
<have to add ipython extension into configuration>
	c.TerminalIPythonApp.extensions = ['line_profiler']
%lprun -f add_and_sum -f call_function call_function() # call line profiling from ipython


# IPython HTML Notebook

# Reloading Module Dependencies

