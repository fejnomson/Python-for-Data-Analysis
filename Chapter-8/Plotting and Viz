ipython --pylab
%gui

# Brief matplotlib API Primer
import matplotlib.pyplot as plt
%matplotlib

fig = plt.figure() # make a Figure object, for plotting
ax1 = fig.add_subplot(2, 2, 1) # returns AxesSubplot objects
ax2 = fig.add_subplot(2, 2, 2)
ax3 = fig.add_subplot(2, 2, 3)
from numpy.random import randn
plt.plot(randn(50).cumsum(), 'k--')
_ = ax1.hist(
	# INTERESTING TO USE _ IN AN OPERATION; TO REFER TO LAST LINE THAT WAY
	randn(100), bins = 20, color = 'k', alpha = 0.3
)
ax2.scatter(np.arange(30), np.arange(30) + 3 * randn(30))
fig, axes = plt.subplots(2, 3)
subplots_adjust(left = None, bottom = None, right = None, top = None,
	wspace = None, hspace = None)
fig, axes = plt.subplots(2, 2, sharex = True, sharey = True)
for i in range(2):
	for j in range(2):
		axes[i, j].hist(randn(500), bins = 50, color = 'k', alpha = 0.5)
plt.subplots_adjust(wspace = 0, hspace = 0)

# Colors, Markers, Line Styles
ax.plot(x, y, 'g--')
plt.plot(randn(30).cumsum(), 'ko--')
plot(randn(30).cumsum(), color = 'k', linestyle = 'dashed', marker = 'o')
data = randn(30).cumsum()
plt.plot(data, 'k--', label = 'Default')
plt.plot(data, 'k-', drawstyle = 'steps-post', label = 'steps-post')
plt.legend(loc = 'best')

# Ticks Labels Legends
fig = plt.figure(); ax = fig.add_subplot(1, 1, 1)
ax.plot(randn(1000).cumsum())
ticks = ax.set_xticks([0, 250, 500, 750, 1000])
labels = ax.set_xticklabels(
	['one', 'two', 'three', 'four', 'five'],
	rotation = 30, fontsize = 'small'
)
ax.set_title('My first matplotlib plot')
ax.set_xlabel('Stages')

fig = plt.figure(); ax = fig.add_subplot(1, 1, 1)
ax.plot(randn(1000).cumsum(), 'k', label = 'one')
ax.plot(randn(1000).cumsum(), 'k--', label = 'two')
ax.plot(randn(1000).cumsum(), 'k.', label = 'three')
ax.legend(loc = 'best')

# Annotations and Drawing on Subplot
ax.text(400, 0, 'Hello World!', family = 'monospace', fontsize = 10)

from datetime import datetime
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
%cd -b pandas_book # change directory bookmark pandas book
%pwd
data = pd.read_csv('ch08/spx.csv', index_col = 0, parse_dates = True)
spx = data['SPX']
spx.plot(ax = ax, style = 'k-')
crisis_data = [
	(datetime(2007, 10, 11), 'Peak of bull market'),
	(datetime(2008, 3, 12), 'Bear Stearns fails'),
	(datetime(2008, 9, 15), 'Lehman Bankruptcy')
]
for date, label in crisis_data:
	ax.annotate(
		label,
		xy = (date, spx.asof(date) + 50),
		xytext = (date, spx.asof(date) + 200),
		arrowprops = dict(facecolor = 'black'),
		horizontalalignment = 'left',
		verticalalignment = 'top'
	)
ax.set_xlim(['1/1/2007', '1/1/2011'])
ax.set_ylim([600, 1800])
ax.set_title('Important dates in 2008-2009 financial crisis')

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
rect = plt.Rectangle((0.2, 0.75), 0.4, 0.15, color = 'k', alpha = 0.3)
circ = plt.Circle((0.7, 0.2), 0.15, color = 'b', alpha = 0.3)
pgon = plt.Polygon(
	[[0.15, 0.15], [0.35, 0.4], [0.2, 0.6]], color = 'g', alpha = 0.5
)
ax.add_patch(rect)
ax.add_patch(circ)
ax.add_patch(pgon)

plt.savefig('figpath.svg')
plt.savefig('figpath.png', dpi = 400, bbox_inches = 'tight')
from io import StringIO
buffer = StringIO()
plt.savefig(buffer)
plot_data = buffer.getvalue()
# write to objects that arent files

# matplotlib Configuration
plt.rc('figure', figsize = (10, 10))
font_options = {
	'family' : 'monospace',
	'weight' : 'bold', 
	'size' : 'small'
}
plt.rc('font', **font_options)

# Plotting Functions in pandas
from pandas import Series, DataFrame
s = Series(np.random.randn(10).cumsum(), index = np.arange(0, 100, 10))
s.plot()
# So Series has a plot method. I like that index is used as x axis as default, super clean
df = DataFrame(
	np.random.randn(10, 4).cumsum(0),
	columns = ['a', 'b', 'c', 'd'],
	index = np.arange(0, 100, 10)
)
df.plot()
fix, axes = plt.subplots(2, 1)
data = Series(np.random.rand(16), index = list('abcdefghijklmnop'))
data.plot(kind = 'bar', ax = axes[0], color = 'k', alpha = 0.7)
data.plot(kind = 'barh', ax = axes[1], color = 'k', alpha = 0.7)
df = DataFrame(
	np.random.randn(6, 4),
	index = ['one', 'two', 'three', 'four', 'five', 'six'],
	columns = pd.Index(['A', 'B', 'C', 'D'],
	name = 'Genus')
)
df.plot(kind = 'bar')
df.plot(kind = 'barh', stacked = True, alpha = 0.5)

tips = pd.read_csv('ch08/tips.csv')
party_counts = pd.crosstab(tips.day, tips['size'])
party_counts = party_counts.loc[:, 2:5]
party_pcts = party_counts.div(party_counts.sum(1).astype(float), axis = 0)
party_pcts.plot(kind = 'bar', stacked = True)

# Histograms Density Plots
tips['tip_pct'] = tips['tip'] / tips['total_bill']
tips['tip_pct'].hist(bins = 50) # pretty clean to have hist method for series
tips['tip_pct'].plot(kind = 'kde')
comp1 = np.random.normal(0, 1, size = 200) # N(0, 1)
comp2 = np.random.normal(10, 2, size = 200) # N(10, 4)
values = pd.Series(np.concatenate([comp1, comp2]))
values.hist(bins = 100, alpha = 0.3, color = 'k', normed = True)
values.plot(kind = 'kde', style = 'k--')
# plot the hist and kde on top of each other from same series

# Scatterplot
macro = pd.read_csv('ch08/macrodata.csv')
data = macro[['cpi', 'm1', 'tbilrate', 'unemp']]
trans_data = np.log(data).diff().dropna()
plt.scatter(trans_data['m1'], trans_data['unemp'])
scatter_matrix(trans_data, diagonal = 'kde', color = 'k', alpha = 0.3)


# Plotting Maps
data = pd.read_csv('ch08/Haiti.csv')
data
data[['INCIDENT DATE', 'LATITUDE', 'LONGITUDE']][:10]
data['CATEGORY'][:6]
data.describe()
data = data[
	(data.LATITUDE > 18) & (data.LATITUDE < 20) &
	(data.LONGITUDE > -75) & (data.LONGITUDE < -70) &
	data.CATEGORY.notnull()
]
def to_cat_list(catstr):
	stripped = (x.strip() for x in catstr.split(','))
	return [x for x in stripped if x]
def get_all_categories(cat_series):
	cat_sets = (set(to_cat_list(x)) for x in cat_series)
	return sorted(set.union(*cat_sets))
def get_english(cat):
	code, names = cat.split('.')
	if '|' in names:
		names = names.split(' | ')[1]
	return code, names.strip()
get_english('2. Urgences logistiques | Vital Lines')
all_cats = get_all_categories(data.CATEGORY)
english_mapping = dict(get_english(x) for x in all_cats)
def get_code(seq):
	return [x.split('.')[0] for x in seq if x]
all_codes = get_code(all_cats)
code_index = pd.Index(np.unique(all_codes))
dummy_frame = pd.DataFrame(
	np.zeros(
		(len(data), len(code_index))
	),
	index = data.index,
	columns = code_index
)
dummy_frame.iloc[:, :6]

for row, cat in zip(data.index, data.CATEGORY):
	codes = get_code(to_cat_list(cat))
	dummy_frame.ix[row, codes] = 1
data = data.join(dummy_frame.add_prefix('category_'))
data.ix[:, 10:15]


from mpl_toolkits import Basemap # .basemap
import matplotlibt.pyplot as plt

def basic_haiti_map(ax = None, lllat = 17.25, urlat = 20.25, lllon = -75, urlon = -71):
	# create polar stereographic Basemap instance.
	m = Basemap(
		ax = ax,
		projection = 'stere',
		lon_0 = (urlon + lllon) / 2,
		lat_0 = (urlat + lllat) / 2,
		llcrnrlat = lllat,
		urcrnrlat = urlat,
		llcrnrlon = lllon,
		urcrnrlon = urlon,
		resolution = 'f'
	)
	# draw coastlines, state and country boundaries, edge of map.
	m.drawcoastlines()
	m.drawstates()
	m.drawcountries()
	return m
# So looks like this just instantiates a Basemap object with some preset values
fig, axes = plt.subplots(nrows = 2, ncols = 2, figsize = (12, 10))
fig.subplots_adjust(hspace = 0.5, wspace = 0.05)
to_plot = ['2a', '1', '3c', '7a']
lllat = 17.25; urlat = 20.25; lllon = -75; urlon = -71
for code, ax in zip(to_plot, axes.flat):
	m = basic_haiti_map(
		ax, lllat = lllat, urlat = urlat, lllon = lllon, urlon = urlon
	)
	cat_data = data[data['category_%s' % code] == 1]
	# compute map proj coordinates.
	x, y = m(cat_data.LONGITUDE, cat_data.LATITUDE)
	m.plot(x, y, 'k.', alpha = 0.5)
	ax.set_title('%s: %s' % (code, english_mapping[code]))

CANT DO THIS WITHOUT INSTALLING THE PACKAGE:
http://matplotlib.org/basemap/users/installing.html
Dont think its worth figuring how to do this right now...
But I think doing a map project would be worthwhile at some point...
	But itd probably be better to do that in R...
  
