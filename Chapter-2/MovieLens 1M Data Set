unames = ['user_id', 'gender', 'age', 'occupation', 'zip']
users = pd.read_table(
	''.join([
		'//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/'
		'Programming/Python/'
		'pydata-book-master/movielens/',
		'users.dat'
	]),
	sep = '::',
	header = None,
	names = unames
)
rnames = ['user_id', 'movie_id', 'rating', 'timestamp']
ratings = pd.read_table(
	''.join([
		'//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/'
		'Programming/Python/'
		'pydata-book-master/movielens/',
		'ratings.dat'
	]),
	sep = '::',
	header = None,
	names = rnames
)
mnames = ['movie_id', 'title', 'genres']
movies = pd.read_table(
	''.join([
		'//firm.seyfarth.com/DFS/CHIUsers/JMonson/My Documents/'
		'Programming/Python/'
		'pydata-book-master/movielens/',
		'movies.dat'
	]),
	sep = '::',
	header = None,
	names = mnames
)

users[:5]
ratings[:5]
movies[:5]

data = pd.merge(
	# merge all tables into one
	pd.merge(ratings, users),	movies
)
data.ix[0]

mean_ratings = data.pivot_table(
	# Mean rating by gender
	values = 'rating',
	index = 'title',
	columns = 'gender',
	aggfunc = 'mean'
)
# Looks like this just aggregates values by two dimensions, using
# 	user-supplied function?
#		mtcars = pd.read_csv('C:/mtcars.csv')
#		mtcars.pivot_table(
#			values = 'mpg',
#			index = 'cyl',
#			columns = 'am',
#			aggfunc = 'mean'
#		)
#		It's kind of Tableau-like aggregation...
mean_ratings[:5]

ratings_by_title = data.groupby('title').size() # n()
ratings_by_title[:10]
active_titles = ratings_by_title.index[ratings_by_title >= 250]
# Subsetting the index!?!? Resulting in an index?!?
mean_ratings = mean_ratings.ix[active_titles]
# Now that you have an index of movie titles with 250+ titles, subset
# 	the original BY LABEL. This is different than R...

top_female_ratings = mean_ratings.sort_index(
	by = 'F', ascending = False
)
top_female_ratings[:10]


# Measuring rating disagreement
mean_ratings['diff'] = mean_ratings['M'] - mean_ratings['F']
sorted_by_diff = mean_ratings.sort_index(by = 'diff')
sorted_by_diff[:15]
sorted_by_diff[::-1][:15]

rating_std_by_title = data.groupby('title')['rating'].std()
rating_std_by_title = rating_std_by_title.ix[active_titles]
rating_std_by_title.order(ascending = False)[:10]
rating_std_by_title.order(ascending = True)[:10]
